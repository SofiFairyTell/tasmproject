text 	segment 'code'                    ;(1)
	include mac.txt                ;(2)
	assume CS:text, DS:data    ;(3)
main 	proc                                    ;(4)Главная процедура
	mov AX,data                     ;(5)Сделаем наши данные
	mov DS,AX                       ;(6)адресуемыми 
;Сохраним вектор 1Ch
	mov AX,351ch                  ;(7)Функция 35h, вектор 1Ch
	int 21h                                ;(8)Вызов DOS
	mov word ptr old_lch,BX  ;(9)Сохраним смещение сегментного обработчика
	mov word ptr old_lch+2,ES;(10)Сохраним сегмент системного обработчика
 ;Заполним вектор 1Ch
	mov AX,251Ch                  ;(11)Функция 25h, вектор 1Ch
	mov DX,offset new_lch     ;(12)Смещение нашего обработчика
	push DS                              ;(13)Сохраним наш DS
	push CS                              ;(14)Настроим DS на сегмент обработчика
	pop DS                               ;(15)(т.е. на сегмент команд)
	int 21h                                ;(16)Вызов DOS
	pop DS                               ;(17)Восстановим адресуемость данных 
;Организуем контрольный вывод на экран строк текста в цикле с задержкой
	mov CX,20                        ;(18)Число повторений вывода строк
wri:    write_string                         ;(19)Макрокоманда вывода на экран
delay_50                             ;(20)Макрокоманда задержки
loop wri                             ;(21) 
;Перед завершением программы восстановим содержимое вектора 1Ch
	lds DX, old_lch                 ;(22)Отправим в DS:DX сохраненный вектор 1Ch
	mov AX,251Ch                 ;(23)Функция 25h, вектор 1Ch
	int 21h                               ;(24)Вызов DOS ;Завершим программу обычным образом
outprog                              ;(25)Завершение программы 
main 	endp                                    ;(26)Конец главной процедуры 
new_lch proc                                    ;(27)Процедура нашего обработчика 
;Наш обработчик от таймера. Его функция - вывод на экран мигающего символа,
 ;свидетельствующего об активности программы!
	push AX                           ;(28)Сохраним используемые в
	push ES                            ;(29)нем регистры
	mov AX, 0B800h             ;(30)Настроим ES
	mov ES,AX                      ;(31)на видеобуфер
	mov AX,CS:syml             ;(32)Получим символ с атрибутом из ячейки syml
	mov ES:3998,AX             ;(33)Выведем в последнюю позицию экрана
	xchg AX,CS:sym2           ;(34)Обменяем содержимое
	mov CS:syml,AX            ;(35)ячеек syml и sym2
	pop ES                             ;(36)Восстановим
	pop AX                            ;(37)сохраненные регистры
	iret                                   ;(38)Вывод из прерывания 
;Поля данных обработчика в сегменте команд 
syml    dw 421Eh                       ;(39)Символы с атрибутами 
sym2    dw 241Eh                        ;(40)для вывода на экран
new_lch	endp	;(41)Конец процедуры обработчика
text	ends	;(42)
data	segment	;(43)
old_lch	dd 0	;(44)Двухсловная ячейка для хранения
                           	; исходного вектора
string	db '************0123456789**********',10,13,'$'  ;(45) 
data	ends	;(46) 
	end main	;(47)
